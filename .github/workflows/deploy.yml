name: Deploy to Hostinger with Approval

on:
  push:
    branches:
      - main # Or 'develop', 'master', etc. - the branch you want to trigger deployment from

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: Production # This links to environment protection rules for approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # This is the manual approval step
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          # IMPORTANT: Replace 'Manish-singh-fbg' below with the actual GitHub username(s) of the approver(s).
          # For multiple approvers, use a comma-separated list, e.g., 'user1,user2'.
          approvers: 'Manish-singh-fbg'
          minimum-approvals: 1
          timeout-minutes: 60 # How long to wait for approval before failing

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOSTNAME }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 21 # Default SSH port, change if Hostinger uses a different one
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.

            echo "Navigating to target directory: ${{ secrets.HOSTINGER_TARGET_DIR }}"
            cd ${{ secrets.HOSTINGER_TARGET_DIR }} || { echo "Failed to change directory. Check HOSTINGER_TARGET_DIR."; exit 1; }

            echo "Creating temporary deployment directory..."
            mkdir -p /tmp/deploy_temp || { echo "Failed to create temporary directory."; exit 1; }

            echo "Copying files from runner to temporary directory on Hostinger..."
            # This command copies all files from the root of your checked-out GitHub repository
            # to the temporary directory on Hostinger.
            rsync -avz --delete . /tmp/deploy_temp/ || { echo "rsync failed. Check rsync installation on Hostinger and permissions."; exit 1; }

            echo "Moving files from temporary directory to final target directory..."
            # This ensures a clean deployment and minimizes downtime
            mv /tmp/deploy_temp/* . || { echo "Failed to move files. Check permissions and target directory."; exit 1; }

            echo "Removing temporary deployment directory..."
            rmdir /tmp/deploy_temp || { echo "Failed to remove temporary directory. It might be non-empty."; }

            echo "Deployment script completed."

            # Optional: Run post-deployment commands (e.g., clear PHP cache, if applicable)
            # For PHP applications, you might need to clear opcache or other caches.
            # Example: php -r "opcache_reset();"
